<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.daitso.purchase.repository.IPurchaseRepository">
		
	<!-- 
		 기능: 구매하기
		 담당자: 최준원 
	 -->
	 <insert id="insertPurchase" parameterType="com.example.daitso.purchase.model.PurchaseInsert">
	 	INSERT INTO purchase ( purchase_id, product_id, customer_id, shipping_id, purchase_num, purchase_count, purchase_price, total_cost, order_request, purchase_dv, creator )
     				  VALUES ( purchase_seq.nextval, (SELECT product_id FROM cart WHERE cart_id = #{cartId}), #{customerId}, #{shippingId}, #{purchaseNum}, (SELECT cart_count FROM cart WHERE cart_id = #{cartId}),
              					( SELECT ((p.product_price - (p.product_price * p.discount_rate * 0.01)) * c.cart_count) - ((p.product_price - (p.product_price * p.discount_rate * 0.01)) * c.cart_count * 
                       					 <choose>
                       					 	<when test="customerCouponId != 0">
                       					 		( SELECT c.coupon_dscnt_rate 
		                           					FROM customer_coupon cc, coupon c 
		                          				   WHERE cc.coupon_id = c.coupon_id 
		                            				 AND cc.customer_coupon_id = #{customerCouponId} ) * 0.01)
                       					 	</when>
                       					    <otherwise>
                       					    	0 )
                       					    </otherwise>
                       					 </choose>
                           				     FROM product p, cart c
                          					WHERE p.product_id = c.product_id
                            				  AND c.cart_id = #{cartId}), #{totalCost}, #{orderRequest}, 401, #{customerId})
	 </insert>

	<!-- 
			기능: 내 주문목록조회
			담당자: 윤상영
		 -->
	<select id="selectAllOrderProduct" parameterType="int" resultType="com.example.daitso.purchase.model.PurchaseCheck">
		SELECT pur.product_id as "productId",
			   pur.customer_id as "customerId",
			   purchase_count					AS	"purchaseCount",
			   REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(purchase_price)), '(\d{3})','\1,')), '^,','')					AS	"purchasePrice",
			   cc.common_code_nm				AS	"purchaseDv",
			   REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(purchase_price * purchase_count)), '(\d{3})','\1,')), '^,','')	AS "totalCost",
			   product_nm						AS 	"productNm",
			   purchase_num						AS	"purchaseNum",
			   pur.create_dt					AS	"createDt"
			   
	   	  FROM purchase pur, product p, common_code cc
	   	 WHERE customer_id=#{customerId} 
	   	   AND pur.product_id = p.product_id
	   	   AND pur.purchase_dv = cc.common_code_id
	  ORDER BY purchase_id DESC
	</select>
	
	<!-- 
			기능: 배송중 카운트
			담당자: 윤상영
		 -->
	<select id="selectShipping" parameterType="int" resultType="int">
		SELECT COUNT(pur.purchase_dv) as "shippingCount"
		  FROM purchase pur
		 WHERE pur.purchase_dv=402 
		   AND pur.customer_id=#{customerId}
	</select>
	
	<!-- 
			기능: 배송완료 카운트
			담당자: 윤상영
		 -->
	<select id="selectShippingComplete" parameterType="int" resultType="int">
		SELECT COUNT(pur.purchase_dv) as "shippingCompleteCount"
		  FROM purchase pur
		 WHERE pur.purchase_dv=403 
		   AND pur.customer_id=#{customerId}
	</select>
	
	<!-- 
			기능: 입금/결제 카운트
			담당자: 윤상영
		 -->
	<select id="selectPayCoin" parameterType="int" resultType="int">
		SELECT COUNT(pur.purchase_dv) as "payCoinCount"
		  FROM purchase pur
		 WHERE pur.purchase_dv=401 
		   AND pur.customer_id=#{customerId}
	</select>
	
	<!-- 
			기능: 주문번호 카운트
			담당자: 윤상영
		 -->
	<select id="selectPurchaseNumCount" parameterType="int" resultType="int">
		SELECT COUNT(pur.purchase_num) as "purchaseNumCount"
		  FROM purchase pur 
		 WHERE pur.customer_id=#{customerId}
	</select>
	
	<!-- 
			기능: 주문상세조회
			담당자: 윤상영
		 -->
	<select id="selectDetailPurchase" resultType="com.example.daitso.purchase.model.PurchaseDetailCheck">
		SELECT p.product_nm 							as "productNm",
			   REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(purchase_price)), '(\d{3})','\1,')), '^,','')					AS	"purchasePrice",
	           pur.purchase_num 						as "purchaseNum",
	           pur.purchase_count 						as "purchaseCount",
			   REGEXP_REPLACE(REVERSE(REGEXP_REPLACE(REVERSE(TO_CHAR(purchase_price * purchase_count)), '(\d{3})','\1,')), '^,','')	AS "totalCost",
	           sh.shipping_receiver_nm 					as "shippingReceiverNm",
	           sh.shipping_receiver_telno 				as "shippingReceiverTelno",
	           sh.shipping_road_nm_addr 				as "shippingRoadNmAddr",
	           sh.shipping_daddr            			as "shippingDaddr",
	           sh.shipping_dmnd             			as "shippingDmnd",
	           pur.create_dt                       		as "createDt",
	   		   cc.common_code_nm     					as "purchaseDv"
	           
		  FROM purchase pur , product p, shipping sh, common_code cc
	     WHERE pur.customer_id = #{customerId} and pur.purchase_num = #{purchaseNum}
	       AND pur.product_id = p.product_id 
	       AND pur.shipping_id = sh.shipping_id
	       AND pur.purchase_dv = cc.common_code_id
	</select>

	<!-- 
		기능: 전체 주문 내역 조회하기
		담당자: 이세인
	-->
	<select id="selectAllPurchaseList" resultType="com.example.daitso.purchase.model.PurchaseList">
	    SELECT p.purchase_id     AS  "purchaseId",
	           r.product_nm      AS  "productNm",
	           c.customer_nm     AS  "customerNm",
		       p.purchase_num	 AS  "purchaseNum",
		       p.create_dt       AS  "createDt",
	           d.common_code_id  AS  "commonCodeId",
	           d.common_code_nm  AS  "commonCodeNm"
	      FROM purchase p
		  JOIN customer c ON p.customer_id = c.customer_id 
	      JOIN common_code d ON p.purchase_dv = d.common_code_id
	      JOIN product r ON r.product_id = p.product_id
	  ORDER BY p.create_dt
	</select>

	<!-- 
		기능: 주문 내역 조회하기(배송상태별)
		담당자: 이세인
	-->
	<select id="selectPurchaseList" resultType="com.example.daitso.purchase.model.PurchaseList">
	    SELECT *
		  FROM( SELECT p.purchase_id                                 AS  "purchaseId",
		               r.product_nm                                  AS  "productNm",
		               c.customer_nm                                 AS  "customerNm",
		               p.purchase_num	                             AS  "purchaseNum",
		               p.create_dt                                   AS  "createDt",
		               d.common_code_id                              AS  "commonCodeId",
		               d.common_code_nm                              AS  "commonCodeNm",
		               ROW_NUMBER() OVER (ORDER BY p.create_dt desc) AS "rn"
		  FROM purchase p
		  JOIN customer c    ON p.customer_id = c.customer_id 
		  JOIN common_code d ON p.purchase_dv = d.common_code_id
		  JOIN product r     ON r.product_id  = p.product_id
	  GROUP BY p.purchase_id, 
			   r.product_nm, 
			   c.customer_nm, 
			   p.purchase_num, 
			   p.create_dt,
	           d.common_code_id,
	           d.common_code_nm
	    HAVING 1=1 
		       <choose>
				<!-- 전체 조회 -->
				    <when test="(commonCodeId == null or commonCodeId == 0)">	
						            
					</when>
				<!-- commonCodeId에 따라서 -->
					<otherwise>
					 AND d.common_code_id = #{commonCodeId}
					 </otherwise>
			  </choose>
			   ) WHERE "rn" BETWEEN #{offset} + 1 AND #{offset} + #{pageSize}
	</select>


	<!-- 
		기능: 주문 내역 개수 조회하기(전체, 배송상태별)
		담당자: 이세인
	-->
	<select id="selectCountPurchaseList">
	    SELECT COUNT (cnt)
		  FROM(	SELECT COUNT(*) AS cnt 
				  FROM purchase p
		          JOIN customer c ON p.customer_id = c.customer_id 
				  JOIN common_code d ON p.purchase_dv = d.common_code_id
				  JOIN product r ON r.product_id = p.product_id
			  GROUP BY p.purchase_id, 
					   r.product_nm, 
					   c.customer_nm, 
					   p.purchase_num, 
					   p.create_dt,
			           d.common_code_id,
			           d.common_code_nm
				HAVING 1=1
				<choose>
				  <!-- 전체 조회 -->
				  <when test="(commonCodeId == null or commonCodeId == 0)">	
				)
				  </when>
	
				  <!-- commonCodeId에 따라서 -->
				  <otherwise>
				  AND d.common_code_id = #{commonCodeId}
				)
				 </otherwise>
				</choose>
	 </select>


	<!-- 
		기능: 배송 상태 변경하기
		담당자: 이세인
	-->
	<update id="changePurchaseStatus" parameterType="com.example.daitso.purchase.model.PurchaseList">
	    UPDATE purchase
	       SET purchase_dv = #{commonCodeId},
	           modifier = 'admin',
               modify_dt = systimestamp
	     WHERE purchase_id = #{purchaseId}
	</update>
	

	<!-- 
		기능: 주문 내역 검색하기 (회원명, 주문번호 선택해서)
		담당자: 이세인
	-->
	<select id="searchPurchaseInfo" resultType="com.example.daitso.purchase.model.PurchaseList">
	    SELECT *
		  FROM( SELECT p.purchase_id                                 AS  "purchaseId",
					   r.product_nm                                  AS  "productNm",
					   c.customer_nm                                 AS  "customerNm",
					   p.purchase_num	                             AS  "purchaseNum",
					   p.create_dt                                   AS  "createDt",
					   d.common_code_id                              AS  "commonCodeId",
					   d.common_code_nm                              AS  "commonCodeNm",
				       ROW_NUMBER() OVER (ORDER BY p.create_dt desc) AS "rn"
		         FROM purchase p
				 JOIN customer c ON p.customer_id = c.customer_id 
				 JOIN common_code d ON p.purchase_dv = d.common_code_id
				 JOIN product r ON r.product_id = p.product_id
			 GROUP BY p.purchase_id, 
					  r.product_nm, 
					  c.customer_nm, 
					  p.purchase_num, 
					  p.create_dt,
			          d.common_code_id,
			          d.common_code_nm
			   HAVING 1=1
			 	<choose>
			 	 <!-- 회원명으로 검색할 때 -->
			     <when test='searchOption == "customerNm"'>
				  AND INSTR(c.customer_nm,#{searchText}) > 0
			     </when>
			     
			     <!-- 주문번호로 검색할 때 -->
			     <when test='searchOption == "purchaseNum"'>
			        AND INSTR(p.purchase_num,#{searchText}) > 0
			     </when>
			    </choose>
				 )    WHERE "rn" BETWEEN #{offset} + 1 AND #{offset} + #{pageSize}
	</select>


	<!-- 
		기능: 검색 결과 개수 조회하기
		담당자: 이세인
	-->
	<select id="selectCountPurchaseInfo">
	    SELECT COUNT (cnt)
		  FROM( SELECT COUNT(*) AS cnt 
				  FROM purchase p
	              JOIN customer c ON p.customer_id = c.customer_id 
	              JOIN common_code d ON p.purchase_dv = d.common_code_id
	              JOIN product r ON r.product_id = p.product_id
	          GROUP BY p.purchase_id, 
	                   r.product_nm, 
	                   c.customer_nm, 
	                   p.purchase_num, 
	                   p.create_dt,
	                   d.common_code_id,
	                   d.common_code_nm
	           HAVING 1=1
			   <choose>
			   	 <!-- 회원명으로 검색할 때 -->
			     <when test='searchOption == "customerNm"'>
				  AND INSTR(c.customer_nm,#{searchText}) > 0
			     )
			     </when>
			     
			      <!-- 주문번호로 검색할 때 -->
				 <when test='searchOption == "purchaseNum"'>
				  AND INSTR(p.purchase_num,#{searchText}) > 0
			     )
				 </when>
		   	   </choose>
	</select>
	
	
	<!--    기능: 주문번호로 주문 상세 내역 조회하기
			담당자: 이세인
	-->	
	<select id="getPurchaseDetails" resultType="com.example.daitso.purchase.model.PurchaseList">
	    SELECT     p.purchase_id                            AS  "purchaseId",
				   r.product_nm                             AS  "productNm",
				   c.customer_nm                            AS  "customerNm",
				   p.purchase_num	                        AS  "purchaseNum",
				   p.create_dt                              AS  "createDt",
				   d.common_code_nm                         AS  "commonCodeNm",
	               p.total_cost                             AS  "totalCost",
	               p.purchase_count                         AS  "purchaseCount",
	               p.purchase_price							AS  "purchasePrice"
		  FROM purchase p
		  JOIN customer c ON p.customer_id = c.customer_id 
		  JOIN common_code d ON p.purchase_dv = d.common_code_id
		  JOIN product r ON r.product_id = p.product_id
		 WHERE p.purchase_num = #{purchaseNum}	
	</select>

</mapper>