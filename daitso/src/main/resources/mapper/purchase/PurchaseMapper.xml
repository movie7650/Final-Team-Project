<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.daitso.purchase.repository.IPurchaseRepository">
		
	<!-- 
		 기능: 구매하기
		 담당자: 최준원 
	 -->
    <insert id="insertPurchase" parameterType="com.example.daitso.purchase.model.PurchaseInsert">
	    INSERT INTO purchase ( purchase_id, product_id, customer_id, shipping_id, purchase_num, purchase_count, purchase_price, total_cost, order_request, purchase_dv, creator )
     				  VALUES ( purchase_seq.nextval, (SELECT product_id FROM cart WHERE cart_id = #{cartId}), #{customerId}, #{shippingId}, #{purchaseNum}, (SELECT cart_count FROM cart WHERE cart_id = #{cartId}),
              					( SELECT ((p.product_price - (p.product_price * p.discount_rate * 0.01)) * c.cart_count) - ((p.product_price - (p.product_price * p.discount_rate * 0.01)) * c.cart_count * 
                       					 <choose>
                       					 	<when test="customerCouponId != 0">
                       					 		( SELECT c.coupon_dscnt_rate 
		                           					FROM customer_coupon cc, coupon c 
		                          				   WHERE cc.coupon_id = c.coupon_id 
		                            				 AND cc.customer_coupon_id = #{customerCouponId} ) * 0.01)
                       					 	</when>
                       					    <otherwise>
                       					    	0 )
                       					    </otherwise>
                       					 </choose>
                           				     FROM product p, cart c
                          					WHERE p.product_id = c.product_id
                            				  AND c.cart_id = #{cartId}), #{totalCost}, #{orderRequest}, 401, #{customerId})
	 </insert>

	<!-- 
			기능: 내 주문목록조회
			담당자: 윤상영
		 -->
	<select id="selectAllOrderProduct" parameterType="int" resultType="com.example.daitso.purchase.model.PurchaseCheck">
		SELECT pur.product_id 					AS "productId",	
			   pur.customer_id 					AS "customerId",
			   purchase_count					AS	"purchaseCount",
			   TO_CHAR(pur.purchase_price, 'FM999,999,999') AS "purchasePrice",
			   cc.common_code_nm				AS	"purchaseDv",
			   TO_CHAR(pur.purchase_price * pur.purchase_count, 'FM999,999,999') AS "totalCost",
			   product_nm						AS 	"productNm",
			   purchase_num						AS	"purchaseNum",
			   pur.create_dt					AS	"createDt",
			   p.product_image_first			AS	"productImg",
			   pur.purchase_id					AS 	"purchaseId",
			   ( SELECT COUNT(*) 
			       FROM review 
			      WHERE purchase_id = pur.purchase_id 
			        AND customer_id=#{customerId} 
			        AND status = 'Y' ) 			AS "reviewCount"	   
	   	  FROM purchase pur, product p, common_code cc
	   	 WHERE customer_id=#{customerId} 
	   	   AND pur.product_id = p.product_id
	   	   AND pur.purchase_dv = cc.common_code_id
	  ORDER BY purchase_id DESC
	</select>
	
	<!-- 
			기능: 배송중 카운트
			담당자: 윤상영
		 -->
	<select id="selectShipping" parameterType="int" resultType="int">
		SELECT COUNT(pur.purchase_dv) as "shippingCount"
		  FROM purchase pur
		 WHERE pur.purchase_dv=402 
		   AND pur.customer_id=#{customerId}
	</select>
	
	<!-- 
			기능: 배송완료 카운트
			담당자: 윤상영
		 -->
	<select id="selectShippingComplete" parameterType="int" resultType="int">
		SELECT COUNT(pur.purchase_dv) as "shippingCompleteCount"
		  FROM purchase pur
		 WHERE pur.purchase_dv=403 
		   AND pur.customer_id=#{customerId}
	</select>
	
	<!-- 
			기능: 입금/결제 카운트
			담당자: 윤상영
		 -->
	<select id="selectPayCoin" parameterType="int" resultType="int">
		SELECT COUNT(pur.purchase_dv) as "payCoinCount"
		  FROM purchase pur
		 WHERE pur.purchase_dv=401 
		   AND pur.customer_id=#{customerId}
	</select>
	
	<!-- 
			기능: 주문번호 카운트
			담당자: 윤상영
		 -->
	<select id="selectPurchaseNumCount" parameterType="int" resultType="int">
		SELECT COUNT(pur.purchase_num) as "purchaseNumCount"
		  FROM purchase pur 
		 WHERE pur.customer_id=#{customerId}
	</select>
	
	<!-- 
			기능: 내 주문상품 전체 갯수 
			담당자: 윤상영
		 -->
	 <select id="countMyOrderList" resultType="int" parameterType="int">
	 	SELECT count(*)
		  FROM purchase
		 WHERE customer_id=#{customerId}
		   AND status='Y'
	 </select>
	 
	<!-- 
			기능: 주문상세조회
			담당자: 윤상영
		 -->
	<select id="selectDetailPurchase" resultType="com.example.daitso.purchase.model.PurchaseDetailCheck">
		SELECT p.product_nm 							as "productNm",
			   TO_CHAR(pur.purchase_price, 'FM999,999,999') AS "purchasePrice",
	           pur.purchase_num 						as "purchaseNum",
	           pur.purchase_count 						as "purchaseCount",
			   TO_CHAR(pur.purchase_price * pur.purchase_count, 'FM999,999,999') AS "totalCost",
	           sh.shipping_receiver_nm 					as "shippingReceiverNm",
	           sh.shipping_receiver_telno 				as "shippingReceiverTelno",
	           sh.shipping_road_nm_addr 				as "shippingRoadNmAddr",
	           sh.shipping_daddr            			as "shippingDaddr",
	           sh.shipping_dmnd             			as "shippingDmnd",
	           pur.create_dt                       		as "createDt",
	   		   cc.common_code_nm     					as "purchaseDv",
	   		   p.product_image_first					as "productImg"
	           
		  FROM purchase pur , product p, shipping sh, common_code cc
	     WHERE pur.customer_id = #{customerId} and pur.purchase_num = #{purchaseNum}
	       AND pur.product_id = p.product_id 
	       AND pur.shipping_id = sh.shipping_id
	       AND pur.purchase_dv = cc.common_code_id
	</select>

	<!-- 
		기능: 전체 주문 내역 조회하기
		담당자: 이세인
	-->
	<select id="selectAllPurchaseList" resultType="com.example.daitso.purchase.model.PurchaseList">
	    SELECT p.purchase_id     AS  "purchaseId",
	           r.product_nm      AS  "productNm",
	           c.customer_nm     AS  "customerNm",
		       p.purchase_num	 AS  "purchaseNum",
		       p.create_dt       AS  "createDt",
	           d.common_code_id  AS  "commonCodeId",
	           d.common_code_nm  AS  "commonCodeNm"
	      FROM purchase p
		  JOIN customer c ON p.customer_id = c.customer_id 
	      JOIN common_code d ON p.purchase_dv = d.common_code_id
	      JOIN product r ON r.product_id = p.product_id
	  ORDER BY p.create_dt
	</select>

	<!-- 
		기능: 주문 내역 조회하기(배송상태별)
		담당자: 이세인
	-->
	<select id="selectPurchaseList" resultType="com.example.daitso.purchase.model.PurchaseList">
	    SELECT *
		  FROM( SELECT p.purchase_id                                 AS  "purchaseId",
		               r.product_nm                                  AS  "productNm",
		               c.customer_nm                                 AS  "customerNm",
		               p.purchase_num	                             AS  "purchaseNum",
		               p.create_dt                                   AS  "createDt",
		               d.common_code_id                              AS  "commonCodeId",
		               d.common_code_nm                              AS  "commonCodeNm",
		               ROW_NUMBER() OVER (ORDER BY p.create_dt desc) AS "rn"
				  FROM purchase p
				  JOIN customer c    ON p.customer_id = c.customer_id 
				  JOIN common_code d ON p.purchase_dv = d.common_code_id
				  JOIN product r     ON r.product_id  = p.product_id
			  GROUP BY p.purchase_id, 
					   r.product_nm, 
					   c.customer_nm, 
					   p.purchase_num, 
					   p.create_dt,
			           d.common_code_id,
			           d.common_code_nm
			    HAVING 1=1 
		        <choose>
				<!-- 전체 조회 -->
				    <when test="(commonCodeId == null or commonCodeId == 0)">	
							            
					</when>
					
				<!-- commonCodeId에 따라서 -->
					<otherwise>
					 AND d.common_code_id = #{commonCodeId}
					</otherwise>
			    </choose>
			   ) WHERE "rn" BETWEEN #{offset} + 1 AND #{offset} + #{pageSize}
	</select>

	<!-- 
		기능: 주문 내역 개수 조회하기(전체, 배송상태별)
		담당자: 이세인
	-->
	<select id="selectCountPurchaseList">
	    SELECT COUNT (*)
		  FROM(	SELECT COUNT(*) 
				  FROM purchase p
		          JOIN customer c ON p.customer_id = c.customer_id 
				  JOIN common_code d ON p.purchase_dv = d.common_code_id
				  JOIN product r ON r.product_id = p.product_id
			  GROUP BY p.purchase_id, 
					   r.product_nm, 
					   c.customer_nm, 
					   p.purchase_num, 
					   p.create_dt,
			           d.common_code_id,
			           d.common_code_nm
				HAVING 1=1
				<choose>
				  <!-- 전체 조회 -->
				  <when test="(commonCodeId == null or commonCodeId == 0)">	
			   )
				  </when>
				  
				  <!-- commonCodeId에 따라서 -->
				  <otherwise>
				  AND d.common_code_id = #{commonCodeId}
			   )
				  </otherwise>
			   </choose>
	 </select>

	<!-- 
		기능: 배송 상태 변경하기
		담당자: 이세인
	-->
	<update id="changePurchaseStatus" parameterType="com.example.daitso.purchase.model.PurchaseList">
	    UPDATE purchase
	       SET purchase_dv = #{commonCodeId},
	           modifier = 'admin',
               modify_dt = systimestamp
	     WHERE purchase_id = #{purchaseId}
	</update>
	
	<!-- 
		기능: 주문 내역 검색하기 (회원명, 주문번호 선택해서)
		담당자: 이세인
	-->
	<select id="searchPurchaseInfo" resultType="com.example.daitso.purchase.model.PurchaseList">
	    <choose>
	        <!-- 검색어가 입력되지 않았을 때 -->
	        <when test='searchText == null or searchText == ""'>
	            SELECT *
	            FROM( SELECT p.purchase_id AS  "purchaseId",
	                         r.product_nm AS  "productNm",
	                         c.customer_nm AS  "customerNm",
	                         p.purchase_num AS  "purchaseNum",
	                         p.create_dt AS  "createDt",
	                         d.common_code_id AS  "commonCodeId",
	                         d.common_code_nm AS  "commonCodeNm",
	                         ROW_NUMBER() OVER (ORDER BY p.create_dt desc) AS "rn"
	                   FROM purchase p
	                   JOIN customer c ON p.customer_id = c.customer_id 
	                   JOIN common_code d ON p.purchase_dv = d.common_code_id
	                   JOIN product r ON r.product_id = p.product_id
	               GROUP BY p.purchase_id, 
	                        r.product_nm, 
	                        c.customer_nm, 
	                        p.purchase_num, 
	                        p.create_dt,
	                        d.common_code_id,
	                        d.common_code_nm
	               HAVING 1=1
	            )    WHERE "rn" BETWEEN #{offset} + 1 AND #{offset} + #{pageSize}
	        </when>
	        <!-- 검색어가 입력된 경우 -->
	        <otherwise>
	            SELECT *
	            FROM( SELECT p.purchase_id AS  "purchaseId",
	                         r.product_nm AS  "productNm",
	                         c.customer_nm AS  "customerNm",
	                         p.purchase_num AS  "purchaseNum",
	                         p.create_dt AS  "createDt",
	                         d.common_code_id AS  "commonCodeId",
	                         d.common_code_nm AS  "commonCodeNm",
	                         ROW_NUMBER() OVER (ORDER BY p.create_dt desc) AS "rn"
	                   FROM purchase p
	                   JOIN customer c ON p.customer_id = c.customer_id 
	                   JOIN common_code d ON p.purchase_dv = d.common_code_id
	                   JOIN product r ON r.product_id = p.product_id
	               GROUP BY p.purchase_id, 
	                        r.product_nm, 
	                        c.customer_nm, 
	                        p.purchase_num, 
	                        p.create_dt,
	                        d.common_code_id,
	                        d.common_code_nm
	               HAVING 1=1
	                <choose>
	                    <!-- 회원명으로 검색할 때 -->
	                    <when test='searchOption == "customerNm"'>
	                        AND INSTR(c.customer_nm,#{searchText}) > 0
	                    </when>
	                    <!-- 주문번호로 검색할 때 -->
	                    <when test='searchOption == "purchaseNum"'>
	                        AND INSTR(p.purchase_num,#{searchText}) > 0
	                    </when>
	                </choose>
            )    WHERE "rn" BETWEEN #{offset} + 1 AND #{offset} + #{pageSize}
            </otherwise>
        </choose>
    </select>


	<!-- 
		기능: 검색 결과 개수 조회하기
		담당자: 이세인
	-->
	<select id="selectCountPurchaseInfo">
	    SELECT COUNT (*)
		  FROM( SELECT COUNT(*)
				  FROM purchase p
	              JOIN customer c ON p.customer_id = c.customer_id 
	              JOIN common_code d ON p.purchase_dv = d.common_code_id
	              JOIN product r ON r.product_id = p.product_id
	          GROUP BY p.purchase_id, 
	                   r.product_nm, 
	                   c.customer_nm, 
	                   p.purchase_num, 
	                   p.create_dt,
	                   d.common_code_id,
	                   d.common_code_nm
	           HAVING 1=1
			   <choose>
			     <!-- 검색어가 입력되지 않았을 때 -->
			   	 <when test='searchText == null or searchText == ""'>
			   	 )
			   	 </when>
			   	 <!-- 회원명으로 검색할 때 -->
			     <when test='searchOption == "customerNm"'>
				  AND INSTR(c.customer_nm,#{searchText}) > 0
			     )
			     </when>
			      <!-- 주문번호로 검색할 때 -->
				 <when test='searchOption == "purchaseNum"'>
				  AND INSTR(p.purchase_num,#{searchText}) > 0
			     )
				 </when>
		   	   </choose>
	</select>
	
	<!--    기능: 주문번호로 주문 상세 내역 조회하기
			담당자: 이세인
	-->	
	<select id="getPurchaseDetails" resultType="com.example.daitso.purchase.model.PurchaseList">
	    SELECT p.purchase_id                            AS  "purchaseId",
			   r.product_nm                             AS  "productNm",
			   c.customer_nm                            AS  "customerNm",
			   p.purchase_num	                        AS  "purchaseNum",
			   p.create_dt                              AS  "createDt",
			   d.common_code_nm                         AS  "commonCodeNm",
	           p.total_cost                             AS  "totalCost",
	           p.purchase_count                         AS  "purchaseCount",
	           p.purchase_price							AS  "purchasePrice"
		  FROM purchase p
		  JOIN customer c ON p.customer_id = c.customer_id 
		  JOIN common_code d ON p.purchase_dv = d.common_code_id
		  JOIN product r ON r.product_id = p.product_id
		 WHERE p.purchase_num = #{purchaseNum}	
	</select>
	
	<!--    기능: 상품구매시 제고 업테이트
			담당자: 최준원
	-->	
	<update id="updateProductStockInPurchase" parameterType="int">
		UPDATE product
		   SET product_stock = product_stock - ( SELECT cart_count FROM cart WHERE cart_id = #{cartId} )
		 WHERE product_id = ( SELECT product_id FROM cart WHERE cart_id = #{cartId} )
	</update>

	<!--    기능:  일별(현재 날짜를 기준으로 7일치), 주별(현재 날짜를 기준으로 4주치), 월별(현재 날짜를 기준으로 5개월치) 매출액과 주문량 조회하기
			담당자: 이세인
	-->
    <select id="selectSalesStatus" parameterType="string"  resultType="com.example.daitso.purchase.model.PurchaseChart">
	    <choose>
		    <when test="dateType == 'day'">
	           SELECT TO_CHAR(TRUNC(create_dt, 'DD'), 'YYYY-MM-DD') AS result,
	                   COUNT(*) AS count,
	                   SUM(total_cost) AS totalCost
	             FROM purchase
	            WHERE create_dt >= TRUNC(SYSDATE, 'DD') - 6 
	         GROUP BY TO_CHAR(TRUNC(create_dt, 'DD'), 'YYYY-MM-DD')
	         ORDER BY TO_CHAR(TRUNC(create_dt, 'DD'), 'YYYY-MM-DD')
	        </when>
			        
	        <when test="dateType == 'week'">
	           SELECT TO_CHAR(TRUNC(create_dt, 'IW'), 'YYYY-MM-DD') AS weekStart,
					  TO_CHAR(TRUNC(create_dt, 'IW') + 6, 'YYYY-MM-DD') AS weekEnd,
					  TO_CHAR(TRUNC(create_dt, 'IW'), 'YYYY-MM-DD') || ' ~ ' || TO_CHAR(TRUNC(create_dt, 'IW') + 6, 'YYYY-MM-DD') AS result,
					  COUNT(*) AS count,
					  SUM(total_cost) AS totalCost
				 FROM purchase
				WHERE create_dt >= TRUNC(SYSDATE, 'DD') - 27
			 GROUP BY TO_CHAR(TRUNC(create_dt, 'IW'), 'YYYY-MM-DD'),
			    	  TO_CHAR(TRUNC(create_dt, 'IW') + 6, 'YYYY-MM-DD')
			 ORDER BY TO_CHAR(TRUNC(create_dt, 'IW'), 'YYYY-MM-DD')
	        </when>
	        
	        <when test="dateType == 'month'">
	           SELECT TO_CHAR(TRUNC(create_dt, 'MM'), 'YYYY-MM') AS result,
	                  COUNT(*) AS count,
	                  SUM(total_cost) AS totalCost
	             FROM purchase
	            WHERE create_dt >= ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -4)
	         GROUP BY TO_CHAR(TRUNC(create_dt, 'MM'), 'YYYY-MM')
	         ORDER BY TO_CHAR(TRUNC(create_dt, 'MM'), 'YYYY-MM')
	         </when>	        
	    </choose>
    </select> 

 	<!--    기능: 당일, 금주, 당월 가장 많이 팔린 상품 상위 5개 조회하기
			담당자: 이세인
	-->
    <select id="selectTopSelling" parameterType="string"  resultType="com.example.daitso.purchase.model.PurchaseChart">
	    <choose>
	        <when test="dateType == 'day'">
	        <![CDATA[
		       SELECT result, productId, productNm, count
			     FROM ( SELECT TO_CHAR(c.create_dt, 'YYYY-MM-DD') AS result,
			                   c.product_id AS productId,
			                   p.product_nm AS productNm,
			                   p.product_price,
			                   SUM(c.purchase_count) AS count,
			                   RANK() OVER (ORDER BY SUM(c.purchase_count) DESC, p.product_price DESC) AS rank
			              FROM purchase c
			              JOIN product p ON c.product_id = p.product_id
			             WHERE TO_CHAR(c.create_dt, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD')
			          GROUP BY TO_CHAR(c.create_dt, 'YYYY-MM-DD'), c.product_id, p.product_nm, p.product_price
			          ) sub
			    WHERE sub.rank <= 5
		   ]]>
	       </when>
	        
	       <when test="dateType == 'week'">
	       <![CDATA[
	          SELECT result, productId, productNm, count
				FROM ( SELECT TO_CHAR(TRUNC(c.create_dt, 'DD'), 'YYYY-MM-DD') AS result,
					          c.product_id AS productId,
					          p.product_nm AS productNm,
                              p.product_price,
					          SUM(c.purchase_count) AS count,
					          RANK() OVER (ORDER BY SUM(c.purchase_count) DESC, p.product_price desc) AS rank
					     FROM purchase c
					     JOIN product p ON c.product_id = p.product_id
					    WHERE c.create_dt >= TRUNC(SYSDATE, 'DD') - 7
					 GROUP BY TO_CHAR(TRUNC(c.create_dt, 'DD'), 'YYYY-MM-DD'), c.product_id, p.product_nm,  p.product_price
					 ) sub
			  WHERE sub.rank <= 5
		   ]]>
	       </when>
	        
	        <when test="dateType == 'month'">
	         <![CDATA[
	            SELECT result, productId, productNm, count
				  FROM ( SELECT TO_CHAR(c.create_dt, 'YYYY-MM') AS result,
					            c.product_id AS productId,
					            p.product_nm AS productNm,
                                p.product_price,
					            SUM(c.purchase_count) AS count,
					            RANK() OVER (ORDER BY SUM(c.purchase_count) DESC, p.product_price DESC) AS rank
					       FROM purchase c
					       JOIN product p ON c.product_id = p.product_id
					      WHERE c.create_dt >= TRUNC(SYSDATE, 'MM') 
					    GROUP BY TO_CHAR(c.create_dt, 'YYYY-MM'), c.product_id, p.product_nm, p.product_price
					    ) sub
			     WHERE sub.rank <= 5
			 ]]>
	        </when>	        
	    </choose>
    </select> 
    
    
    <select id="selectCountPurchaseDv">
    	select count(*) from purchase where purchase_dv = #{purchaseDv}
    </select>

</mapper>