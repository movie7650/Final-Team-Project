<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.daitso.product.repository.IProductRepository">

<resultMap type="com.example.daitso.product.model.Product" id="productMap">
    <result column="product_group_id" 		property="productGroupId" />
	<result column="product_id"				property="productId" />
	<result column="category_id"			property="categoryId" />
	<result column="product_nm"				property="productNm" />
	<result column="product_content"		property="productContent" />
	<result column="product_price"			property="productPrice" />
	<result column="product_stock"			property="productStock" />
	<result column="product_sales_count"	property="productSalesCount" />
	<result column="product_option_first"	property="productOptionFirst" />
	<result column="product_option_second"	property="productOptionSecond" />
	<result column="product_option_third"	property="productOptionThird" />
	<result column="product_image_first"	property="productImageFirst" />
	<result column="product_image_second"	property="productImageSecond" />
	<result column="product_image_third"	property="productImageThird" />
	<result column="discount_rate"          property="discountRate" />
	<result column="status"					property="status" />
	<result column="create_dt"				property="createDt" />
	<result column="creator"				property="creator" />
	<result column="modify_dt"				property="modifyDt" />
	<result column="modifier"				property="modifier" />
</resultMap>

<select id="selectProductList" parameterType="int" resultType="com.example.daitso.product.model.Product">
    SELECT a.product_id AS productId, 
   		a.product_group_id AS productGroupId,
		a.category_id AS categoryId, 
		a.product_image_first AS productImageFirst, 
		a.product_nm AS productNm, 
		NVL(b.review_star_point,0) AS reviewStarPoint, 
        NVL(b.review_count,0) AS reviewCount,
		a.product_content AS productContent, 
		a.product_stock AS productStock, 
		a.discount_rate AS discountRate,
		a.product_price AS productPrice
    FROM(
    	SELECT product_id, product_group_id, discount_rate, category_id, product_image_first, product_nm, review_star_point, product_content, product_stock, 
    			product_price, rownum as rnum , row_number() over (partition by product_group_id order by product_price) snum
    	FROM(
    		SELECT p.product_id		AS		product_id,  discount_rate,
				   product_group_id, category_id, product_nm, product_content, product_price, product_stock, product_image_first, review_star_point
			FROM product p
	        LEFT JOIN review r ON p.product_id = r.product_id
   			WHERE category_id in (
									SELECT category_id from category c
									START WITH category_id = #{categoryId}
								   	CONNECT BY PRIOR category_id = category_pr_id
								  )
			 AND p.status = 'Y'
			 ORDER BY p.product_id
            )
    ) a
    LEFT JOIN  (select product_group_id, round(avg(review_star_point) * 20,0) AS review_star_point, count(review_star_point) AS review_count from review r 
                LEFT JOIN product p ON r.product_id = p.product_id GROUP BY product_group_id
           	   ) b 
    ON a.product_group_id = b.product_group_id
    WHERE rnum between #{start} and #{end} and snum = 1
</select>

<select id="selectCountProductList" parameterType="int" resultType="int">
	SELECT count(*)
	  FROM (
	  		 SELECT distinct product_group_id 
	  		   FROM product 
	 		  WHERE category_id IN (
			 						 SELECT category_id 
		 							   FROM category START WITH category_id = #{categoryId} 
								    CONNECT BY PRIOR category_id = category_pr_id
						   		   )
	        )
</select>


<select id="selectProduct" parameterType="int" resultType="com.example.daitso.product.model.Product">
	SELECT product_group_id AS productGroupId,
			product_id AS productId,
			category_id AS categoryId,
			product_nm AS productNm,
			product_content AS productContent,
			product_price AS productPrice,
			product_stock AS productStock,
			product_sales_count AS productSalesCount,
			product_max_get AS productMaxGet,
			product_option_first AS productOptionFirst,
			product_option_second AS productOptionSecond,
			product_option_third AS productOptionThird,
			product_image_first AS productImageFirst,
			product_image_second AS productImageSecond,
			product_image_third AS productImageThird,
			product_max_get AS productMaxGet,
			discount_rate AS discountRate
	 FROM product p
	WHERE product_id = #{productId}
</select>


    <!-- 
	    기능: 상품 조회하기(카테고리별)
	    담당자: 이세인
    -->
    <select id="selectProductsByCategory" resultType="com.example.daitso.product.model.ProductCheck">
	    SELECT *
	      FROM ( SELECT p.product_group_id  AS "productGroupId",
		                p.product_nm        AS "productNm",
		                c.category_pr_id    AS "categoryPrId",
		                c.category_id       AS "categoryId",
		                c.category_nm       AS "categoryNm",
		                ROW_NUMBER() OVER (ORDER BY p.product_group_id DESC) AS "rn"
		           FROM product p
		           JOIN category c
					 ON p.category_id = c.category_id
		       GROUP BY p.product_group_id, 
		                p.product_nm, 
		                c.category_pr_id, 
		                c.category_id, 
		                c.category_nm
		         HAVING 1=1
			        <choose>
			            <!-- 아무 카테고리도 선택되지 않은 경우 -->
			            <when test="(firstCategoryId == null or firstCategoryId == 0) and (secondCategoryId == null or secondCategoryId == 0)
			            and (thirdCategoryId == null or thirdCategoryId == 0)">		            
			            </when>
			            
			            <!-- 첫 번째, 두 번째 카테고리를 선택한 경우 -->
			            <when test="firstCategoryId != null and firstCategoryId != 0 and secondCategoryId != null and secondCategoryId != 0
			            and (thirdCategoryId == null or thirdCategoryId == 0)">
			                AND (c.category_pr_id = #{firstCategoryId} AND c.category_id = #{secondCategoryId}) 
			                 OR  c.category_pr_id = #{secondCategoryId}
			            </when>
			            
			            <!-- 첫 번째, 두 번째, 세 번째 카테고리를 모두 선택한 경우 -->
			            <when test="firstCategoryId != null and firstCategoryId != 0 and secondCategoryId != null and secondCategoryId != 0
			            and thirdCategoryId != null and thirdCategoryId != 0">
			                AND c.category_pr_id = #{secondCategoryId}
			            </when>
			            
			            <!-- 첫 번째 카테고리만 선택한 경우 -->
			            <otherwise>
			                AND c.category_pr_id = #{firstCategoryId}
			            </otherwise>
			        </choose>
	    ) WHERE "rn" BETWEEN #{offset} + 1 
	                     AND #{offset} + #{pageSize}
	</select>

    <!-- 
		기능: 카테고리별 상품 개수 조회하기
		담당자: 이세인
	-->
	<select id="selectCountProducts">
		SELECT COUNT (cnt)
		  FROM(	SELECT COUNT(*) AS cnt 
		          FROM product p 
			      JOIN category c 
			        ON p.category_id = c.category_id
			  GROUP BY p.product_group_id, 
			           p.product_nm, 
			           c.category_pr_id, 
			           c.category_id, 
			           c.category_nm
		    	HAVING 1=1
				   <choose>
				       <!-- 아무 카테고리도 선택되지 않은 경우 -->
				       <when test="(firstCategoryId == null or firstCategoryId == 0) and (secondCategoryId == null or secondCategoryId == 0)
				            	    and (thirdCategoryId == null or thirdCategoryId == 0)">
				       )
				       </when>
				        
				       <!-- 첫 번째, 두 번째 카테고리를 선택한 경우 -->
				       <when test="firstCategoryId != null and firstCategoryId != 0 and secondCategoryId != null and secondCategoryId != 0
				                   and (thirdCategoryId == null or thirdCategoryId == 0)">
				         AND (c.category_pr_id = #{firstCategoryId} AND c.category_id = #{secondCategoryId}) 
				          OR  c.category_pr_id = #{secondCategoryId}
				       )
				       </when>
				        
				       <!-- 첫 번째, 두 번째, 세 번째 카테고리를 모두 선택한 경우 -->
				       <when test="firstCategoryId != null and firstCategoryId != 0 and secondCategoryId != null and secondCategoryId != 0
				                   and thirdCategoryId != null and thirdCategoryId != 0">
				         AND c.category_pr_id = #{secondCategoryId}
				       )
				       </when>
				          
				       <!-- 첫 번째 카테고리만 선택한 경우 -->
				       <otherwise>
				         AND c.category_pr_id = #{firstCategoryId}
				       )
				       </otherwise>
				   </choose>
    </select>

	<!-- 
		기능: 상품 조회하기(그룹별)
		담당자: 이세인
	-->
	<select id="selectProductsByGroupId" resultType="com.example.daitso.product.model.ProductCheck">
	    SELECT p.product_id            AS "productId",
	           c.category_nm           AS "categoryNm",
	           p.category_id           AS "categoryId",
		       p.product_group_id      AS "productGroupId",
		       p.product_code          AS "productCode",
	           p.product_nm            AS "productNm",
		       p.product_option_first  AS "productOptionFirst",		       
		       p.product_option_second AS "productOptionSecond",
		       p.product_option_third  AS "productOptionThird",
		       p.product_price         AS "productPrice",
	 	       p.product_stock         AS "productStock"
	   	 FROM  product p 
		 JOIN  category c 
		   ON  p.category_id = c.category_id
	    WHERE  p.product_group_id = #{productGroupId}
	 ORDER BY  p.product_price
	</select>
	
	<!-- 
		기능: 상품 삭제하기(그룹)
		담당자: 이세인
	-->
	<delete id="deleteProductByGroupId" parameterType="int">
	    DELETE 
	      FROM product 
	     WHERE product_group_id = #{productGroupId}
	</delete>

	<!-- 
		기능: 상품ID로 상품 정보 갖고오기
		담당자: 이세인
	-->
	<select id="selectProductId" resultType="com.example.daitso.product.model.Product" parameterType="int">
	    SELECT product_group_id        AS "productGroupId",
	           product_code            AS "productCode",
	           product_id			   AS "productId",
	           product_nm 			   AS "productNm",
	           product_option_first    AS "productOptionFirst",
		       product_option_second   AS "productOptionSecond",
			   product_option_third    AS "productOptionThird",
			   product_price           AS "productPrice",
			   product_stock           AS "productStock"
		  FROM product p
	     WHERE product_id = #{productId}
	</select>

	<!-- 
		기능: 상품 수정하기
		담당자: 이세인
	-->
	<update id="updateProduct" parameterType="com.example.daitso.product.model.Product">
	    UPDATE product
		   SET product_option_first  = #{productOptionFirst},
		   	   product_option_second = #{productOptionSecond},
		   	   product_option_third  = #{productOptionThird},
		   	   product_price = #{productPrice},
		       product_stock = #{productStock}
		 WHERE product_id = #{productId}
	</update>

	<!-- 
		기능: 상품 삭제하기
		담당자: 이세인
	-->
	<delete id="deleteProduct" parameterType="int">
	    DELETE 
	      FROM product 
	     WHERE product_id = #{productId}
	</delete>

	<!-- 
		기능: 기존 상품 등록하기
		담당자: 이세인
	-->
	<insert id="registerExistingProducts" parameterType="com.example.daitso.product.model.ProductCheck">
		DECLARE v_product_id NUMBER;
		  BEGIN		  
		 INSERT INTO product ( product_group_id,
							   product_id,
							   category_id,
						       product_nm,
					     	   product_content,
						       product_image_first,
							   product_price,
							   product_stock,
							   product_option_first,
							   product_option_second,
							   product_option_third ) 
		 VALUES ( #{productGroupId},
		          product_seq.NEXTVAL,
		          #{categoryId},
		          #{productNm},
		          #{productContent},
		          #{productImageFirst},
		          #{productPrice},
		          #{productStock},
		          #{productOptionFirst},
		          #{productOptionSecond},
		          #{productOptionThird} )		         
       RETURNING  product_id INTO v_product_id;
          UPDATE  product
		     SET  product_code = CONCAT(v_product_id, TO_CHAR(create_dt, 'YYYYMMDDHH24MISSFF3'))
		   WHERE  product_id = v_product_id;
		 COMMIT;
		    END;
    </insert>


<!-- 상품명으로 그룹 상품 찾기 -->
 <select id="searchProductsByName" resultType="com.example.daitso.product.model.ProductCheck">
        SELECT DISTINCT
        p.product_group_id AS "productGroupId",
        c.category_nm AS "categoryNm",
        p.product_nm AS "productNm",
        p.category_id AS "categoryId"
        FROM product p
        JOIN category c ON p.category_id = c.category_id
        WHERE INSTR(p.product_nm,#{searchText}) > 0
</select>



<select id="selectProductOptionFirst" parameterType="int" resultType="map">
	SELECT nvl(product_option_first,0) AS optionFirst 
	FROM product WHERE product_group_id = #{productGroupId}
	GROUP BY product_option_first
</select>

<select id="selectProductOptionSecond" resultType="map">
	SELECT nvl(max(product_option_second),0) AS optionSecond
	FROM product 
	WHERE product_group_id=#{productGroupId}
	<choose>
		<when test='productOptionFirst.equals("0")'>
		</when>
		<otherwise>
			AND product_option_first = #{productOptionFirst}
		</otherwise>
	</choose>
	GROUP BY product_option_second
</select>

<select id="selectProductOptionThird" resultType="map">
	SELECT nvl(max(product_option_third),0) AS optionThird
	FROM product 
	WHERE product_group_id=#{productGroupId}
	<choose>
		<when test='productOptionFirst.equals("0")'>
		</when>
		<otherwise>
			AND product_option_first = #{productOptionFirst}
		</otherwise>
	</choose>
	<choose>
		<when test='productOptionSecond.equals("0")'>
		</when>
		<otherwise>
			AND product_option_second = #{productOptionSecond}
		</otherwise>
	</choose>
	 GROUP BY product_option_third
</select>

<select id="selectOptionProduct" resultMap="productMap">
	SELECT * FROM
				(
				SELECT p.*, rownum as rnum 
				FROM product p
				WHERE product_group_id = #{productGroupId}
				<choose>
					<when test='productOptionFirst.equals("0")'>
					</when>
					<otherwise>
						AND product_option_first = #{productOptionFirst}
					</otherwise>
				</choose>
				<choose>
					<when test='productOptionSecond.equals("0")'>
					</when>
					<otherwise>
						AND product_option_second = #{productOptionSecond}
					</otherwise>
				</choose>
				<choose>
					<when test='productOptionThird.equals("0")'>
					</when>
					<otherwise>
							AND product_option_third = #{productOptionThird}
					</otherwise>
				</choose>
				ORDER BY product_price
				)
	WHERE rnum = 1
</select>

<select id="selectInquiryProductId" resultType="int">
	SELECT product_id 
	FROM product
	WHERE product_group_id = #{productGroupId} and status='Y'
	<choose>
		<when test='size.equals("사이즈옵션 없음")'>
			and product_option_first is null
		</when>
		<otherwise>
			and product_option_first = #{size}
		</otherwise>
	</choose>
	<choose>
		<when test='color.equals("색상옵션 없음")'>
			and product_option_second is null
		</when>
		<otherwise>
			and product_option_second = #{color}
		</otherwise>
	</choose>
	<choose>
		<when test='other.equals("기타옵션 없음")'>
			and product_option_third is null
		</when>
		<otherwise>
			and product_option_third = #{other}
		</otherwise>
	</choose>
</select>

<select id="selectSpecialProduct" resultType="com.example.daitso.product.model.SpecialProduct">
	SELECT special_product_id AS specialProductId,
			p.product_group_id AS specialProductGroupId,
			special_product_nm AS specialProductNm, 
			category_id AS categoryId, 
			product_price AS productPrice,  
			NVL(average,0) AS reviewStarPoint, 
			NVL(cnt,0) AS rCnt
	FROM special_product sp 
	LEFT JOIN product p ON sp.special_product_id = p.product_id
	LEFT JOIN (
				SELECT product_group_id, round(avg(review_star_point) * 20,0) as average, count(product_group_id) as cnt
            	FROM review r left join product p on r.product_id = p.product_id group by product_group_id
              ) sr
    ON p.product_group_id = sr.product_group_id
    WHERE to_char(sp.create_dt,'YY/MM/DD') = to_char(sysdate,'YY/MM/DD')
</select>

<select id="saleProductList" resultType = "com.example.daitso.product.model.Product" >
	SELECT  p.product_id AS productId,
            p.product_group_id AS productGroupId,
            p.product_nm AS productNm,
            category_id AS categoryId,
            product_price AS productPrice,
            NVL(average,0) AS reviewStarPoint, 
			NVL(cnt,0) AS reviewCount
	FROM product p  
	LEFT JOIN (
				SELECT product_group_id, round(avg(review_star_point) * 20,0) as average, count(product_group_id) as cnt
            	FROM review r 
                LEFT JOIN product p ON r.product_id = p.product_id 
                GROUP BY product_group_id
              ) sr
    ON p.product_group_id = sr.product_group_id
    WHERE discount_rate != 0
</select>

</mapper>