<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.daitso.product.repository.IProductRepository">

<resultMap type="com.example.daitso.product.model.Product" id="productMap">
	<result column="product_group_id" property="productGroupId" />
	<result column="product_id"		property="productId" />
	<result column="category_id"	property="categoryId" />
	<result column="product_nm"		property="productNm" />
	<result column="product_content"	property="productContent" />
	<result column="product_price"	property="productPrice" />
	<result column="product_stock"	property="productStock" />
	<result column="product_sales_count"	property="productSalesCount" />
	<result column="product_option_first"	property="productOptionFirst" />
	<result column="product_option_second"	property="productOptionSecond" />
	<result column="product_option_third"	property="productOptionThird" />
	<result column="product_image_first"	property="productImageFirst" />
	<result column="product_image_second"	property="productImageSecond" />
	<result column="product_image_third"	property="productImageThird" />
	<result column="status"					property="status" />
	<result column="create_dt"				property="createDt" />
	<result column="creator"				property="creator" />
	<result column="modify_dt"				property="modifyDt" />
	<result column="modifier"				property="modifier" />
</resultMap>


<select id="selectProductList" parameterType="int" resultType="com.example.daitso.product.model.Product">
    SELECT product_id AS productId, 
		category_id AS categoryId, 
		product_image_first AS productImageFirst, 
		product_nm AS productNm, 
		review_star_point AS reviewStarPoint, 
		review_count AS reviewCount, 
		product_content AS productContent, 
		product_stock AS productStock, 
		product_price AS productPrice
	FROM(
    	SELECT product_id, category_id, product_image_first, product_nm, review_star_point, review_count, product_content, product_stock, 
    			product_price, rownum as rnum , row_number() over (partition by product_group_id order by product_price) snum
    	FROM(
    		SELECT p.product_id		AS		product_id,
				   product_group_id, category_id, product_nm, product_content, product_price, product_stock, product_image_first, NVL(avg(review_star_point)*20,0) AS review_star_point,
            	   count(review_star_point) AS review_count
			 FROM product p
	         LEFT JOIN review r on p.product_id = r.product_id
    		WHERE category_id in (
									SELECT category_id from category c
									 START WITH category_id = #{categoryId}
								   CONNECT BY PRIOR category_id = category_pr_id
								  )
			   AND p.status = 'Y'
			 GROUP BY p.product_id, product_group_id, category_id, product_nm, product_content, product_price, product_stock, product_image_first
			 ORDER BY p.product_id
	  							  )

					)
    WHERE rnum between #{start} and #{end} and snum = 1
</select>

<select id="selectCountProductList" parameterType="int" resultType="int">
	SELECT count(*)
	  FROM (
	  		 SELECT distinct product_group_id 
	  		   FROM product 
	 		  WHERE category_id IN (
			 						 SELECT category_id 
		 							   FROM category START WITH category_id = #{categoryId} 
								    CONNECT BY PRIOR category_id = category_pr_id
						   		   )
	        )
</select>


<select id="selectProduct" parameterType="int" resultMap="productMap">
	SELECT * FROM product
	WHERE product_id = #{productId}
</select>

<!-- 상품 등록 
주석 제대로 달기 
이름이랑 해서 -->
<insert id="registerProducts" parameterType="com.example.daitso.product.model.Product">
<![CDATA[
    INSERT INTO product ( product_id, 
						  category_id, 
						  product_nm, 
						  product_content,
						  product_image_first,
						  product_image_second,
						  product_image_third,
						  product_price, 
						  product_stock, 
						  product_option_first, 
						  product_option_second, 
						  product_option_third )
    VALUES ( product_seq.NEXTVAL, 
			 #{subCategoryId}, 
			 #{productNm}, 
			 #{productContent},
			 #{productImageFirst},
			 #{productImageSecond},
			 #{productImageThird},
			 #{productPrice}, 
			 #{productStock}, 
			 #{productOptionFirst}, 
			 #{productOptionSecond}, 
			 #{productOptionThird} )
]]>
</insert>

<!-- 상품 삭제 -->
<delete id="deleteProduct" parameterType="int">
    DELETE 
      FROM product 
     WHERE product_id = #{productId}
</delete>


<!-- 상품 수정 -->
<update id="updateProduct" parameterType="com.example.daitso.product.model.Product">
	UPDATE product
	   SET product_price = #{productPrice}, product_stock = #{productStock}
	 WHERE product_id = #{productId}
</update>

<!-- 상품 수정을 위한 해당 상품 정보 가져오기 -->
<select id="selectProductId" resultType="com.example.daitso.product.model.Product" parameterType="int">
	SELECT product_id as "productId",
		   product_nm as "productNm",
		   product_code as "productCode",
		   product_price as "productPrice",
		   product_stock as "productStock"
	  FROM product
	 WHERE product_id = #{productId}
</select>

<!-- 상품 조회 (카테고리별 필터링) -->
<select id="selectProducts" resultType="com.example.daitso.product.model.Product">
    SELECT DISTINCT
		    p.product_id AS "productId",
		    p.product_group_id AS "productGroupId",
		    p.product_nm AS "productNm",
		    p.product_code AS "productCode",
		    p.product_option_first AS "productOptionFirst",
		    p.product_option_second AS "productOptionSecond",
		    p.product_option_third AS "productOptionThird",
		    p.product_image_first AS "productImageFirst",
		    p.product_image_second AS "productImageSecond",
		    p.product_image_third AS "productImageThird",
		    p.product_price AS "productPrice",
		    p.product_stock AS "productStock",
		    c.category_pr_id AS "categoryPrId",
		    c.category_id AS "categoryId",
		    c.category_nm AS "categoryNm"
      FROM product p
      JOIN category c 
        ON p.category_id = c.category_id
     WHERE 1=1
		    <choose>
		        <!-- 아무 카테고리도 선택되지 않은 경우 -->
		        <when test="(firstCategoryId == null or firstCategoryId == 0) and (secondCategoryId == null or secondCategoryId == 0)">
		           ORDER BY product_id DESC
		        </when>
		        <!-- 상위 및 하위 카테고리를 모두 선택한 경우 -->
		        <when test="firstCategoryId != null and firstCategoryId != 0 and secondCategoryId != null and secondCategoryId != 0">
		           AND (c.category_pr_id = #{firstCategoryId} AND c.category_id = #{secondCategoryId})
		           ORDER BY product_id DESC
		        </when>
		        <!-- 상위 카테고리만 선택한 경우 -->
		        <otherwise>
		           AND c.category_pr_id = #{firstCategoryId}
		           ORDER BY product_id DESC
		        </otherwise>
		    </choose>
</select>

<select id="selectProductOptionFirst" parameterType="int" resultType="map">
	SELECT nvl(product_option_first,0) AS optionFirst 
	FROM product WHERE product_group_id = #{productGroupId}
	GROUP BY product_option_first
</select>

<select id="selectProductOptionSecond" resultType="map">
	SELECT nvl(max(product_option_second),0) AS optionSecond
	FROM product 
	WHERE product_group_id=#{productGroupId}
	<choose>
		<when test='productOptionFirst.equals("0")'>
		</when>
		<otherwise>
			AND product_option_first = #{productOptionFirst}
		</otherwise>
	</choose>
	GROUP BY product_option_second
</select>

<select id="selectProductOptionThird" resultType="map">
	SELECT nvl(max(product_option_third),0) AS optionThird
	FROM product 
	WHERE product_group_id=#{productGroupId}
	<choose>
		<when test='productOptionFirst.equals("0")'>
		</when>
		<otherwise>
			AND product_option_first = #{productOptionFirst}
		</otherwise>
	</choose>
	<choose>
		<when test='productOptionSecond.equals("0")'>
		</when>
		<otherwise>
			AND product_option_second = #{productOptionSecond}
		</otherwise>
	</choose>
	 GROUP BY product_option_third
</select>

<select id="selectOptionProduct" resultMap="productMap">
	SELECT * FROM
	(SELECT p.*, rownum as rnum FROM product p
	WHERE product_group_id = #{productGroupId}
	<choose>
		<when test='productOptionFirst.equals("0")'>
		</when>
		<otherwise>
			AND product_option_first = #{productOptionFirst}
		</otherwise>
	</choose>
	<choose>
		<when test='productOptionSecond.equals("0")'>
		</when>
		<otherwise>
			AND product_option_second = #{productOptionSecond}
		</otherwise>
	</choose>
	<choose>
		<when test='productOptionThird.equals("0")'>
		</when>
		<otherwise>
				AND product_option_third = #{productOptionThird}
		</otherwise>
	</choose>
	ORDER BY product_price)
	WHERE rnum = 1
</select>

</mapper>