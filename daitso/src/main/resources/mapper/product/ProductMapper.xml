<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.daitso.product.repository.IProductRepository">

	<resultMap type="com.example.daitso.product.model.Product" id="productMap">
		<result column="product_group_id" property="productGroupId" />
		<result column="product_id"		property="productId" />
		<result column="category_id"	property="categoryId" />
		<result column="product_nm"		property="productNm" />
		<result column="product_content"	property="productContent" />
		<result column="product_price"	property="productPrice" />
		<result column="product_stock"	property="productStock" />
		<result column="product_option_first"	property="productOptionFirst" />
		<result column="product_option_second"	property="productOptionSecond" />
		<result column="product_option_third"	property="productOptionThird" />
		<result column="product_image_first"	property="productImageFirst" />
		<result column="product_image_second"	property="productImageSecond" />
		<result column="product_image_third"	property="productImageThird" />
		<result column="discount_rate"          property="discountRate" />
		<result column="status"					property="status" />
		<result column="create_dt"				property="createDt" />
		<result column="creator"				property="creator" />
		<result column="modify_dt"				property="modifyDt" />
		<result column="modifier"				property="modifier" />
	</resultMap>
	
	<!-- 
		기능1: 리뷰 평점을 포함한 특정 카테고리 상품들 조회
		기능2: 높은 가격, 낮은 가격, 평점순으로 정렬
		담당자: 나현웅 
	 -->
	<select id="selectProductList" parameterType="int" resultType="com.example.daitso.product.model.Product">
	    SELECT product_id AS productId, 
	   		product_group_id AS productGroupId,
			category_id AS categoryId, 
	        product_image_first AS productImageFirst, 
			product_nm AS productNm, 
			review_star_point AS reviewStarPoint, 
	        NVL(review_count,0) AS reviewCount,
			product_content AS productContent, 
			product_stock AS productStock, 
			discount_rate AS discountRate,
			product_price AS productPrice
	    FROM(
	    	SELECT product_id, product_group_id, discount_rate, category_id, product_image_first, product_nm, product_content, product_stock, 
	                review_star_point, review_count,
	    			product_price, rownum as rnum
	    	FROM(
	    		SELECT p.product_id		AS		product_id,  discount_rate, row_number() over (partition by p.product_group_id order by product_price) snum,
					   p.product_group_id, category_id, product_nm, product_content, product_price, product_stock, product_image_first, NVL(review_star_point,0) AS review_star_point, review_count
				FROM product p
	            LEFT JOIN  (
	                        select product_group_id, round(avg(review_star_point) * 20,0) AS review_star_point, count(review_star_point) AS review_count 
	                        from review r 
	                        LEFT JOIN product mp ON r.product_id = mp.product_id GROUP BY product_group_id
	                        ) b ON p.product_group_id = b.product_group_id
	   			WHERE category_id in (
										SELECT category_id from category c
										START WITH category_id = #{categoryId}
									   	CONNECT BY PRIOR category_id = category_pr_id
									  )
				 AND p.status = 'Y'
	            )
	        WHERE snum = 1
	    ) 
	    WHERE rnum between #{start} and #{end}
	    <choose>
		 	<when test='"normal".equals(sort)'>
				 ORDER BY product_id			 	
		 	</when>
		 	<when test='"highPrice".equals(sort)'>
		 		ORDER BY product_price DESC
		 	</when>
		 	<when test='"lowPrice".equals(sort)'>
		 		ORDER BY product_price
		 	</when>
		 	<when test='"highRate".equals(sort)'>
		 		ORDER BY review_star_point DESC
		 	</when>
		</choose>
	</select>

	<!-- 
		기능: 특정 카테고리 상품 개수 조회(페이징 처리를 위한 기능)
		담당자: 나현웅
	 -->
	<select id="selectCountProductList" parameterType="int" resultType="int">
		SELECT count(*)
		  FROM (
		  		 SELECT distinct product_group_id 
		  		   FROM product 
		 		  WHERE category_id IN (
				 						 SELECT category_id 
			 							   FROM category START WITH category_id = #{categoryId} 
									    CONNECT BY PRIOR category_id = category_pr_id
							   		   )
				 AND status = 'Y'
		        )
	</select>

	<!-- 
		기능: 상품 상세 조회에서 보여줄 상품 정보 조회
		담당자: 나현웅
	 -->
	<select id="selectProduct" parameterType="int" resultType="com.example.daitso.product.model.Product">
		SELECT product_group_id AS productGroupId,
				product_id AS productId,
				category_id AS categoryId,
				product_nm AS productNm,
				product_content AS productContent,
				product_price AS productPrice,
				product_stock AS productStock,
				product_max_get AS productMaxGet,
				product_option_first AS productOptionFirst,
				product_option_second AS productOptionSecond,
				product_option_third AS productOptionThird,
				product_image_first AS productImageFirst,
				product_image_second AS productImageSecond,
				product_image_third AS productImageThird,
				product_max_get AS productMaxGet,
				discount_rate AS discountRate
		 FROM product p
		WHERE product_id = #{productId}
	</select>


    <!-- 
	    기능: 상품 조회하기(카테고리별)
	    담당자: 이세인
    -->
    <select id="selectProductsByCategory" resultType="com.example.daitso.product.model.ProductCheck">
        SELECT *
	      FROM ( SELECT p.product_group_id  AS "productGroupId",
		                p.product_nm        AS "productNm",
		                c.category_pr_id    AS "categoryPrId",
		                c.category_id       AS "categoryId",
		                c.category_nm       AS "categoryNm",
		                ROW_NUMBER() OVER (ORDER BY p.product_group_id DESC) AS "rn"
		           FROM product p
		           JOIN category c
					 ON p.category_id = c.category_id AND p.status ='Y'
		       GROUP BY p.product_group_id, 
		                p.product_nm, 
		                c.category_pr_id, 
		                c.category_id, 
		                c.category_nm
		         HAVING 1=1
			        <choose>
			            <!-- 아무 카테고리도 선택되지 않은 경우 -->
			            <when test="(firstCategoryId == null or firstCategoryId == 0) and (secondCategoryId == null or secondCategoryId == 0)
			            		     and (thirdCategoryId == null or thirdCategoryId == 0)">		            
			            </when>
			            
			            <!-- 첫 번째, 두 번째 카테고리를 선택한 경우 -->
			            <when test="firstCategoryId != null and firstCategoryId != 0 and secondCategoryId != null and secondCategoryId != 0
			            		    and (thirdCategoryId == null or thirdCategoryId == 0)">
			              AND (c.category_pr_id = #{firstCategoryId} AND c.category_id = #{secondCategoryId}) 
			               OR  c.category_pr_id = #{secondCategoryId}
			            </when>
			            
			            <!-- 첫 번째, 두 번째, 세 번째 카테고리를 모두 선택한 경우 -->
			            <when test="firstCategoryId != null and firstCategoryId != 0 and secondCategoryId != null and secondCategoryId != 0
			           		        and thirdCategoryId != null and thirdCategoryId != 0">
			              AND c.category_pr_id = #{secondCategoryId}
			            </when>
			            
			            <!-- 첫 번째 카테고리만 선택한 경우 -->
			            <otherwise>
			              AND c.category_pr_id = #{firstCategoryId}
			            </otherwise>
			        </choose>
	            ) WHERE "rn" BETWEEN #{offset} + 1 AND #{offset} + #{pageSize}
		</select>


    <!-- 
		기능: 카테고리별 상품 개수 조회하기(페이징 처리)
		담당자: 이세인
	-->
	<select id="selectCountProducts">
	    SELECT COUNT (*)
		  FROM(	SELECT COUNT(*)
		          FROM product p 
			      JOIN category c 
			        ON p.category_id = c.category_id  AND p.status ='Y'
			  GROUP BY p.product_group_id, 
			           p.product_nm, 
			           c.category_pr_id, 
			           c.category_id, 
			           c.category_nm
		    	HAVING 1=1
				   <choose>
				       <!-- 아무 카테고리도 선택되지 않은 경우 -->
				       <when test="(firstCategoryId == null or firstCategoryId == 0) and (secondCategoryId == null or secondCategoryId == 0)
				            	    and (thirdCategoryId == null or thirdCategoryId == 0)">
				       )
				       </when>
				        
				       <!-- 첫 번째, 두 번째 카테고리를 선택한 경우 -->
				       <when test="firstCategoryId != null and firstCategoryId != 0 and secondCategoryId != null and secondCategoryId != 0
				                   and (thirdCategoryId == null or thirdCategoryId == 0)">
				         AND (c.category_pr_id = #{firstCategoryId} AND c.category_id = #{secondCategoryId}) 
				          OR  c.category_pr_id = #{secondCategoryId}
				       )
				       </when>
				        
				       <!-- 첫 번째, 두 번째, 세 번째 카테고리를 모두 선택한 경우 -->
				       <when test="firstCategoryId != null and firstCategoryId != 0 and secondCategoryId != null and secondCategoryId != 0
				                   and thirdCategoryId != null and thirdCategoryId != 0">
				         AND c.category_pr_id = #{secondCategoryId}
				       )
				       </when>
				          
				       <!-- 첫 번째 카테고리만 선택한 경우 -->
				       <otherwise>
				         AND c.category_pr_id = #{firstCategoryId}
				       )
				       </otherwise>
				  </choose>
    	 </select>


	<!-- 
		기능: 상품 조회하기(그룹ID별)
		담당자: 이세인
	-->
	<select id="selectProductsByGroupId" resultType="com.example.daitso.product.model.ProductCheck">
	    SELECT p.product_id             AS "productId",
	           c.category_nm            AS "categoryNm",
	           p.category_id            AS "categoryId",
		       p.product_group_id       AS "productGroupId",
		       p.product_code           AS "productCode",
	           p.product_nm             AS "productNm",
		       p.product_option_first   AS "productOptionFirst",		       
		       p.product_option_second  AS "productOptionSecond",
		       p.product_option_third   AS "productOptionThird",
		       p.product_price          AS "productPrice",
	 	       p.product_stock          AS "productStock",
	 	       p.product_max_get        AS "productMaxGet",
               p.product_image_first	AS "productImageFirst",
			   p.product_image_second	AS "productImageSecond",
			   p.product_image_third	AS "productImageThird"
	   	 FROM  product p 
		 JOIN  category c 
		   ON  p.category_id = c.category_id AND p.status = 'Y'
	    WHERE  p.product_group_id = #{productGroupId}
	 ORDER BY  p.product_price
	</select>
	
	
	<!-- 
		기능: 상품 삭제하기(그룹)
		담당자: 이세인
	-->
	<delete id="deleteProductByGroupId" parameterType="int">
    UPDATE product
	   SET status = 'N',
	   	   modifier = 'admin',
           modify_dt = systimestamp
     WHERE product_group_id = #{productGroupId}
	</delete>


	<!-- 
		기능: 상품ID로 상품 정보 조회하기
		담당자: 이세인
	-->
	<select id="selectProductByProductId" resultType="com.example.daitso.product.model.Product" parameterType="int">
	    SELECT product_group_id        AS "productGroupId",
	           product_code            AS "productCode",
	           product_id			   AS "productId",
	           product_nm 			   AS "productNm",
	           product_option_first    AS "productOptionFirst",
		       product_option_second   AS "productOptionSecond",
			   product_option_third    AS "productOptionThird",
			   product_price           AS "productPrice",
			   product_stock           AS "productStock",
			   product_image_first	   AS "productImageFirst",
			   product_image_second	   AS "productImageSecond",
			   product_image_third	   AS "productImageThird",
			   product_max_get         AS "productMaxGet"   
		  FROM product p
	     WHERE product_id = #{productId}
	</select>


	<!-- 
		기능: 상품 수정하기
		담당자: 이세인
	-->
	<update id="updateProduct" parameterType="com.example.daitso.product.model.Product">
	    UPDATE product
		   SET product_price         = #{productPrice},
		       product_stock         = #{productStock},
		       product_max_get       = #{productMaxGet},
		       modifier              = 'admin',
               modify_dt             = systimestamp
		 WHERE product_id = #{productId}
	</update>
	<!--<update id="updateProduct" parameterType="com.example.daitso.product.model.Product">
		    UPDATE product
			   SET product_option_first  = #{productOptionFirst},
			   	   product_option_second = #{productOptionSecond},
			   	   product_option_third  = #{productOptionThird},
			   	   product_price         = #{productPrice},
			       product_stock         = #{productStock},
			       product_max_get       = #{productMaxGet},
			       modifier              = 'admin',
	               modify_dt             = systimestamp
			 WHERE product_id = #{productId}
		</update> -->


	<!-- 
		기능: 상품 이미지 정보 삭제하기
		담당자: 이세인
	-->
    <update id="deleteProductImages" parameterType="int">
        UPDATE product
          <set>
	        <if test="deleteFirstImage">
	        		  product_image_first = NULL,
	        </if>
	        <if test="deleteSecondImage">
	        		  product_image_second = NULL,
	        </if>
	        <if test="deleteThirdImage">
	        		  product_image_third = NULL
	        </if>
         </set>
         WHERE product_id = #{productId}
    </update>
    
    
	<!-- 
			기능: 상품 이미지 정보 삭제하기
			담당자: 이세인
		-->
	
	<update id="updateProductImages">
	    UPDATE product
	       SET
		    <choose>
		        <when test="selector == 1">
		            product_image_first = #{imageUrl}
		        </when>
		        <when test="selector == 2">
		            product_image_second = #{imageUrl}
		        </when>
		        <when test="selector == 3">
		            product_image_third = #{imageUrl}
		        </when>
		    </choose>
	    WHERE product_id = #{productId}
	</update>
	<!-- 	<update id="updateProductImages">
		    UPDATE product
			   SET
			    <if test="uploadFirstImage != null">product_image_first = #{imageUrls},</if>
			    <if test="uploadSecondImage != null">product_image_second = #{imageUrls},</if>
			    <if test="uploadThirdImage != null">product_image_third = #{imageUrls}</if>
			  WHERE product_id = #{productId}
		</update> -->
    
    
	<!-- 
		기능: 상품 삭제하기
		담당자: 이세인
	-->
	<delete id="deleteProduct" parameterType="int">
	    UPDATE product
	       SET status = 'N',
	           modifier  = 'admin',
               modify_dt = systimestamp 
	     WHERE product_id = #{productId}
	</delete>


	<!-- 
		기능: 상품 등록하기(상품 등록을 하고, 해당 상품에 상품 코드를 생성하기)
		담당자: 이세인
	-->
	<insert id="registerProduct" parameterType="com.example.daitso.product.model.ProductCheck">
		  DECLARE
		    v_product_id NUMBER;
		  BEGIN
		    IF (#{productGroupId} IS NULL OR #{productGroupId} = 0) THEN
		      INSERT INTO product (
		        product_group_id,
		        product_id,
		        category_id,
		        product_nm,
		        product_content,
		        product_image_first,
		        product_price,
		        product_stock,
		        product_option_first,
		        product_option_second,
		        product_option_third,
		        product_max_get
		      )
		      VALUES (
		        product_group_seq.NEXTVAL,
		        product_seq.NEXTVAL,
		        #{categoryId},
		        #{productNm},
		        #{productContent},
		        #{productImageFirst},
		        #{productPrice},
		        #{productStock},
		        #{productOptionFirst},
		        #{productOptionSecond},
		        #{productOptionThird},
		        #{productMaxGet}
		      )
		      RETURNING product_id INTO v_product_id;
		
		      UPDATE product
		         SET product_code = CONCAT(v_product_id, TO_CHAR(create_dt, 'YYYYMMDDHH24MISSFF3'))
		       WHERE product_id = v_product_id;
		    ELSE
		      INSERT INTO product (
		        product_group_id,
		        product_id,
		        category_id,
		        product_nm,
		        product_content,
		        product_image_first,
		        product_price,
		        product_stock,
		        product_option_first,
		        product_option_second,
		        product_option_third,
		        product_max_get
		      )
		      VALUES (
		        #{productGroupId},
		        product_seq.NEXTVAL,
		        #{categoryId},
		        #{productNm},
		        #{productContent},
		        #{productImageFirst},
		        #{productPrice},
		        #{productStock},
		        #{productOptionFirst},
		        #{productOptionSecond},
		        #{productOptionThird},
		        #{productMaxGet}
		      )
		      RETURNING product_id INTO v_product_id;
		
		      UPDATE product
		         SET product_code = CONCAT(v_product_id, TO_CHAR(create_dt, 'YYYYMMDDHH24MISSFF3'))
		       WHERE product_id = v_product_id;
		    END IF;
		
		    COMMIT;
		  END;
	</insert>


	<!-- 
		기능: 중복된 상품의 개수를 반환하기
		담당자: 이세인
	-->
	<select id="countDuplicateProducts" resultType="int">
	    SELECT COUNT(*) 
	      FROM product
	     WHERE product_nm = #{productNm}
	       AND product_group_id = #{productGroupId}
	       AND product_option_first = #{productOptionFirst}
	       AND product_option_second = #{productOptionSecond}
	       AND product_option_third = #{productOptionThird}
	</select>
    
    
	<!-- 
		기능: 상품명으로 그룹 상품 조회하기
		담당자: 이세인
	-->
	<select id="searchProductsByName" resultType="com.example.daitso.product.model.ProductCheck">
	    SELECT DISTINCT p.product_group_id   AS "productGroupId",
		        	    c.category_nm        AS "categoryNm",
		       			p.product_nm         AS "productNm",
		        		p.category_id        AS "categoryId"
		  FROM product p
		  JOIN category c 
		    ON p.category_id = c.category_id AND p.status = 'Y'
		 WHERE INSTR(p.product_nm,#{searchText}) > 0
	</select>


	<!-- 
		기능: 그룹 상품이 가지는 첫 번째 옵션(사이즈) 종류 조회
		담당자: 나현웅
	 -->
	<select id="selectProductOptionFirst" parameterType="int" resultType="map">
		SELECT nvl(product_option_first,0) AS optionFirst 
		FROM product 
		WHERE product_group_id = #{productGroupId} AND status = 'Y'
		GROUP BY product_option_first
	</select>
	
	
	<!-- 
		기능: 그룹 상품이 가지는 두 번째 옵션(색깔) 종류 조회
			 => 첫 번째 옵션이 선택되었다면 첫 번째 옵션이 가지는 두 번째 옵션(색깔) 종류 조회
		담당자: 나현웅
	 -->
	<select id="selectProductOptionSecond" resultType="map">
		SELECT nvl(max(product_option_second),0) AS optionSecond
		FROM product 
		WHERE product_group_id=#{productGroupId} AND status='Y'
		<choose>
			<when test='"0".equals(productOptionFirst)'>
			</when>
			<otherwise>
				AND product_option_first = #{productOptionFirst}
			</otherwise>
		</choose>
		GROUP BY product_option_second
	</select>
	
	
	<!-- 
		기능: 그룹 상품이 가지는 세 번째 옵션(기타) 종류 조회
			 => 첫 번째, 두 번째 옵션이 선택되었다면 그에 맞는 세 번째 옵션(기타) 종류 조회
		담당자: 나현웅
	 -->
	<select id="selectProductOptionThird" resultType="map">
		SELECT nvl(max(product_option_third),0) AS optionThird
		FROM product 
		WHERE product_group_id=#{productGroupId} AND status='Y'
		<choose>
			<when test='"0".equals(productOptionFirst)'>
			</when>
			<otherwise>
				AND product_option_first = #{productOptionFirst}
			</otherwise>
		</choose>
		<choose>
			<when test='"0".equals(productOptionSecond)'>
			</when>
			<otherwise>
				AND product_option_second = #{productOptionSecond}
			</otherwise>
		</choose>
		 GROUP BY product_option_third
	</select>
	
	
	<!-- 
		기능: 선택된 옵션에 맞는 상품 조회
		     => 만약 첫 번째 옵션만 선택되어 옵션에 맞는 상품이 2개가 조회되었을 경우 가장 낮은 가격인 상품을 우선순위로 조회
		담당자: 나현웅
	 -->
	<select id="selectOptionProduct" resultMap="productMap">
		SELECT * FROM
					(
					SELECT p.*, rownum as rnum 
					FROM product p
					WHERE product_group_id = #{productGroupId} AND status = 'Y'
					<choose>
						<when test='"0".equals(productOptionFirst)'>
						</when>
						<otherwise>
							AND product_option_first = #{productOptionFirst}
						</otherwise>
					</choose>
					<choose>
						<when test='"0".equals(productOptionSecond)'>
						</when>
						<otherwise>
							AND product_option_second = #{productOptionSecond}
						</otherwise>
					</choose>
					<choose>
						<when test='"0".equals(productOptionThird)'>
						</when>
						<otherwise>
								AND product_option_third = #{productOptionThird}
						</otherwise>
					</choose>
					ORDER BY product_price
					)
		WHERE rnum = 1
	</select>
	
	
	<!-- 
		기능: 문의글 작성시 문의글이 가리키는 productID 조회
		담당자: 나현웅
	 -->
	<select id="selectInquiryProductId" resultType="int">
		SELECT product_id 
		FROM product
		WHERE product_group_id = #{productGroupId} and status='Y'
		<choose>
			<when test='"사이즈옵션 없음".equals(size)'>
				and product_option_first is null
			</when>
			<otherwise>
				and product_option_first = #{size}
			</otherwise>
		</choose>
		<choose>
			<when test='"색상옵션 없음".equals(color)'>
				and product_option_second is null
			</when>
			<otherwise>
				and product_option_second = #{color}
			</otherwise>
		</choose>
		<choose>
			<when test='"기타옵션 없음".equals(other)'>
				and product_option_third is null
			</when>
			<otherwise>
				and product_option_third = #{other}
			</otherwise>
		</choose>
	</select>
	
	
	<!--
		기능: 현재 날짜로 업데이트된 인기상품 조회
		담당자: 나현웅 
	 -->
	<select id="selectSpecialProduct" resultType="com.example.daitso.product.model.SpecialProduct">
		SELECT special_product_id AS specialProductId,
				sp.product_id AS productId,
				p.product_group_id AS specialProductGroupId,
				p.product_nm AS specialProductNm, 
				category_id AS categoryId, 
				product_price AS productPrice,  
				NVL(average,0) AS reviewStarPoint, 
				NVL(cnt,0) AS rCnt
		FROM special_product sp 
		LEFT JOIN product p ON sp.product_id = p.product_id
		LEFT JOIN (
					SELECT product_group_id, round(avg(review_star_point) * 20,0) as average, count(product_group_id) as cnt
	            	FROM review r left join product p on r.product_id = p.product_id group by product_group_id
	              ) sr
	    ON p.product_group_id = sr.product_group_id
	    WHERE to_char(sp.create_dt,'YY/MM/DD') = to_char(sysdate,'YY/MM/DD')
	</select>
	
	
	<!-- 
		기능: 할인상품 정보 조회
		담당자: 나현웅
	 -->
	<select id="saleProductList" resultType = "com.example.daitso.product.model.Product" >
		SELECT  p.product_id AS productId,
	            p.product_group_id AS productGroupId,
	            p.product_nm AS productNm,
	            category_id AS categoryId,
	            product_price AS productPrice,
	            NVL(average,0) AS reviewStarPoint, 
				NVL(cnt,0) AS reviewCount
		FROM product p  
		LEFT JOIN (
					SELECT product_group_id, round(avg(review_star_point) * 20,0) as average, count(product_group_id) as cnt
	            	FROM review r 
	                LEFT JOIN product p ON r.product_id = p.product_id 
	                GROUP BY product_group_id
	              ) sr
	    ON p.product_group_id = sr.product_group_id
	    WHERE discount_rate != 0
	</select>
	
	
	<!-- 
		기능: 인기상품, 할인상품을 선정하기 위해 판매량을 기준으로 가장 많이 팔린 상품 10개, 가장 적게 팔린 상품 10개를 조회
		담당자: 나현웅
	 -->
	<select id="searchSpecialProduct" resultType="map">
		SELECT product_id as productId 
		FROM (	
	    	SELECT product_id
			FROM
				(
				SELECT p.product_id, p.product_group_id, p.product_nm, p.product_price, NVL(pSum, 0) as pSum,  row_number() over (partition by p.product_group_id order by product_price) snum from product p 	
				LEFT JOIN (
							select p.product_group_id, sum(purchase_count) as pSum from purchase pc left join product p on pc.product_id = p.product_id
	                    	group by p.product_group_id
					  		) s 
				ON  p.product_group_id = s.product_group_id
				WHERE p.status = 'Y'
				)
	    	WHERE snum = 1 
	    	<if test='"popular".equals(selector)'>
		    	ORDER BY pSum DESC   	
	    	</if>
	    	<if test='"sale".equals(selector)'>
		    	ORDER BY pSum    	
	    	</if>
	    	  ) 
	   	WHERE rownum between 1 and 10
	</select>
	
	
	<!-- 
		기능: 선정된 인기 상품을 special_product 테이블에 삽입
		담당자: 나현웅
	 -->
	<insert id="insertPopularProducts">
		INSERT ALL
		<foreach collection="list" item="item" index="index" separator=" ">
			INTO special_product (special_product_id, product_id, create_dt, creator) 
			VALUES( CONCAT(#{index}, TO_CHAR(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF3')), #{item.PRODUCTID}, SYSDATE, 'computer')
		</foreach>
		SELECT * FROM dual
	</insert>
	
	
	<!-- 
		기능: 선정된 할인 상품을 product 테이블에서 찾아 할인율 10%로 업데이트
		담당자: 나현웅
	 -->
	<update id="updateSaleProducts">
		DECLARE 
	    
	    BEGIN
			
			UPDATE product SET discount_rate = 0;
			       
			<foreach collection="list" item="item" index="index" separator=" ">
				UPDATE product SET discount_rate = 10 WHERE product_id = #{item.PRODUCTID} ;
			</foreach>
	
	    END;
	</update>


	<!-- 
		기능: 검색한 이름을 가진 상품 조회
		담당자: 나현웅
	 -->
	<select id="selectSearchProduct" resultType="com.example.daitso.product.model.Product">
		SELECT product_id AS productId,
				product_group_id AS productGroupId,
				category_id AS categoryId,
				product_image_first AS productImageFirst,
				product_nm AS productNm,
				NVL(review_star_point,0) AS reviewStarPoint,
				NVL(review_count,0) AS reviewCount,
				product_content AS productContent,
				product_stock AS productStock,
				discount_rate AS discountRate,
				product_price AS productPrice
		FROM(
			SELECT product_id, product_group_id, discount_rate, category_id, product_image_first, product_nm, product_content, product_stock,
					review_star_point, review_count,
					product_price, rownum as rnum
			FROM(
				SELECT p.product_id		AS		product_id,  discount_rate, row_number() over (partition by p.product_group_id order by product_price) snum,
						p.product_group_id, category_id, product_nm, product_content, product_price, product_stock, product_image_first, review_star_point, review_count
				FROM product p
				LEFT JOIN  (
							SELECT product_group_id, round(avg(review_star_point) * 20,0) AS review_star_point, count(review_star_point) AS review_count
							FROM review r
							LEFT JOIN product mp ON r.product_id = mp.product_id GROUP BY product_group_id
							) b
				ON p.product_group_id = b.product_group_id
				WHERE instr(p.product_nm,#{searchText}) > 0
				AND p.status = 'Y'
				<choose>
					<when test='"normal".equals(sort)'>
						ORDER BY p.product_id
					</when>
					<when test='"highPrice".equals(sort)'>
						ORDER BY p.product_price DESC
					</when>
					<when test='"lowPrice".equals(sort)'>
						ORDER BY p.product_price
					</when>
					<when test='"highRate".equals(sort)'>
						ORDER BY review_star_point
					</when>
				</choose>
			)
			WHERE snum = 1
		)
		WHERE rnum between #{start} and #{end}
	</select>
	
	<!-- 
		기능: 검색된 상품 개수 조회
		담당자: 나현웅
	 -->
	<select id="selectSearchProductCount" resultType="int">
		SELECT count(*)
		FROM (
			SELECT distinct product_group_id
			FROM product
			WHERE INSTR(product_nm, #{searchText}) > 0
		AND status = 'Y'
		)
	</select>
</mapper>