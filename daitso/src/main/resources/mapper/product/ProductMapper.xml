<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.daitso.product.repository.IProductRepository">

<resultMap type="com.example.daitso.product.model.Product" id="productMap">
	<result column="product_group_id" property="productGroupId" />
	<result column="product_id"		property="productId" />
	<result column="category_id"	property="categoryId" />
	<result column="product_nm"		property="productNm" />
	<result column="product_content"	property="productContent" />
	<result column="product_price"	property="productPrice" />
	<result column="product_stock"	property="productStock" />
	<result column="product_sales_count"	property="productSalesCount" />
	<result column="product_option_first"	property="productOptionFirst" />
	<result column="product_option_second"	property="productOptionSecond" />
	<result column="product_option_third"	property="productOptionThird" />
	<result column="product_image_first"	property="productImageFirst" />
	<result column="product_image_second"	property="productImageSecond" />
	<result column="product_image_third"	property="productImageThird" />
	<result column="status"					property="status" />
	<result column="create_dt"				property="createDt" />
	<result column="creator"				property="creator" />
	<result column="modify_dt"				property="modifyDt" />
	<result column="modifier"				property="modifier" />
</resultMap>


<select id="selectProductList" parameterType="int" resultType="com.example.daitso.product.model.Product">
    SELECT a.product_id AS productId, 
   		a.product_group_id AS productGroupId,
		a.category_id AS categoryId, 
		a.product_image_first AS productImageFirst, 
		a.product_nm AS productNm, 
		NVL(b.review_star_point,0) AS reviewStarPoint, 
        NVL(b.review_count,0) AS reviewCount,
		a.product_content AS productContent, 
		a.product_stock AS productStock, 
		a.product_price AS productPrice
    FROM(
    	SELECT product_id, product_group_id, category_id, product_image_first, product_nm, review_star_point, product_content, product_stock, 
    			product_price, rownum as rnum , row_number() over (partition by product_group_id order by product_price) snum
    	FROM(
    		SELECT p.product_id		AS		product_id,
				   product_group_id, category_id, product_nm, product_content, product_price, product_stock, product_image_first, review_star_point
			FROM product p
	        LEFT JOIN review r on p.product_id = r.product_id
   			WHERE category_id in (
									SELECT category_id from category c
									START WITH category_id = #{categoryId}
								   	CONNECT BY PRIOR category_id = category_pr_id
								  )
			 AND p.status = 'Y'
			 ORDER BY p.product_id
            )
    ) a
    LEFT JOIN  (select product_group_id, round(avg(review_star_point) * 20,0) AS review_star_point, count(review_star_point) AS review_count from review r 
                LEFT JOIN product p ON r.product_id = p.product_id GROUP BY product_group_id
           	   ) b 
    ON a.product_group_id = b.product_group_id
    WHERE rnum between #{start} and #{end} and snum = 1
</select>

<select id="selectCountProductList" parameterType="int" resultType="int">
	SELECT count(*)
	  FROM (
	  		 SELECT distinct product_group_id 
	  		   FROM product 
	 		  WHERE category_id IN (
			 						 SELECT category_id 
		 							   FROM category START WITH category_id = #{categoryId} 
								    CONNECT BY PRIOR category_id = category_pr_id
						   		   )
	        )
</select>


<select id="selectProduct" parameterType="int" resultMap="productMap">
	SELECT * FROM product
	WHERE product_id = #{productId}
</select>




<!-- 
	기능: 카테고리별 상품 조회하기
	담당자: 이세인
-->
<select id="selectProductsByCategory" resultType="com.example.daitso.product.model.ProductCheck">
    SELECT *
    FROM (
	          SELECT
	          		p.product_id AS "productId",
	              	p.product_group_id AS "productGroupId",
	                p.product_nm AS "productNm",
	                c.category_pr_id AS "categoryPrId",
	                c.category_id AS "categoryId",
	                c.category_nm AS "categoryNm",
	                ROW_NUMBER() OVER (ORDER BY p.product_group_id DESC) AS "rn"
	           FROM product p
	           JOIN category c
				 ON p.category_id = c.category_id
	       GROUP BY p.product_id, p.product_group_id, p.product_nm, c.category_pr_id, c.category_id, c.category_nm
	         HAVING 1=1
        <choose>
            <!-- 아무 카테고리도 선택되지 않은 경우 -->
            <when test="(firstCategoryId == null or firstCategoryId == 0) and (secondCategoryId == null or secondCategoryId == 0)
            and (thirdCategoryId == null or thirdCategoryId == 0)">
            
            </when>
            <!-- 첫 번째, 두 번째 카테고리를 선택한 경우 -->
            <when test="firstCategoryId != null and firstCategoryId != 0 and secondCategoryId != null and secondCategoryId != 0
            and (thirdCategoryId == null or thirdCategoryId == 0)">
                AND (c.category_pr_id = #{firstCategoryId} AND c.category_id = #{secondCategoryId}) OR c.category_pr_id =#{secondCategoryId}
            </when>
            <!-- 첫 번째, 두 번째, 세 번째 카테고리를 모두 선택한 경우 -->
            <when test="firstCategoryId != null and firstCategoryId != 0 and secondCategoryId != null and secondCategoryId != 0
            and thirdCategoryId != null and thirdCategoryId != 0">
                AND c.category_pr_id = #{secondCategoryId}
            </when>
            <!-- 첫 번째 카테고리만 선택한 경우 -->
            <otherwise>
                AND c.category_pr_id = #{firstCategoryId}
            </otherwise>
        </choose>
    ) WHERE "rn" BETWEEN #{offset} + 1 AND #{offset} + #{pageSize}
</select>


<!-- 
	기능: 카테고리별 상품 개수 조회하기
	담당자: 이세인
-->
<select id="selectCountProducts">
	SELECT COUNT (cnt)
	FROM(
			SELECT COUNT(*) AS cnt 
	        FROM product p 
		    JOIN category c ON p.category_id = c.category_id
		    GROUP BY p.product_id, p.product_group_id, p.product_nm, c.category_pr_id, c.category_id, c.category_nm
	    	HAVING 1=1
    <choose>
        <!-- 아무 카테고리도 선택되지 않은 경우 -->
        <when test="(firstCategoryId == null or firstCategoryId == 0) and (secondCategoryId == null or secondCategoryId == 0)
            and (thirdCategoryId == null or thirdCategoryId == 0)">
           )
            </when>
        <!-- 첫 번째, 두 번째 카테고리를 선택한 경우 -->
            <when test="firstCategoryId != null and firstCategoryId != 0 and secondCategoryId != null and secondCategoryId != 0
            and (thirdCategoryId == null or thirdCategoryId == 0)">
           AND (c.category_pr_id = #{firstCategoryId} AND c.category_id = #{secondCategoryId}) OR c.category_pr_id =#{secondCategoryId}
           )
        </when>
        <!-- 첫 번째, 두 번째, 세 번째 카테고리를 모두 선택한 경우 -->
            <when test="firstCategoryId != null and firstCategoryId != 0 and secondCategoryId != null and secondCategoryId != 0
            and thirdCategoryId != null and thirdCategoryId != 0">
          AND c.category_pr_id = #{secondCategoryId}
          )
            </when>  
        <!-- 첫 번째 카테고리만 선택한 경우 -->
        <otherwise>
           AND c.category_pr_id = #{firstCategoryId}
           )
        </otherwise>
    </choose>
</select>


<!-- 
	기능: 그룹 상품 삭제하기
	담당자: 이세인
-->
<delete id="deleteGroupProduct" parameterType="int">
    DELETE 
      FROM product 
     WHERE product_group_id = #{productGroupId}
</delete>


<!-- 
	기능: 그룹별 상품 조회하기
	담당자: 이세인
-->
<select id="selectProductsByGroupId" resultType="com.example.daitso.product.model.Product">
		SELECT product_id as "productId",
			   product_group_id as "productGroupId",
		       product_code as "productCode",
		       product_nm as "productNm",
		       product_option_first as "productOptionFirst",
		       product_option_second as "productOptionSecond",
		       product_option_third as "productOptionThird",
		       product_price as "productPrice",
		       product_stock as "productStock"
		FROM product
		WHERE product_group_id = #{productGroupId}
</select>


<!-- 해당 상품 정보 불러오기 -->
<select id="selectProductId" resultType="com.example.daitso.product.model.Product" parameterType="int">
	SELECT product_group_id AS "productGroupId",
        product_code as "productCode",
        product_id as "productId",
        product_nm AS "productNm",
        product_option_first as "productOptionFirst",
		product_option_second as "productOptionSecond",
		product_option_third as "productOptionThird",
		product_price as "productPrice",
		product_stock as "productStock"
	   FROM product p
    WHERE product_id = #{productId}
</select>


<!-- 해당 상품 수정하기 -->
<update id="updateProduct" parameterType="com.example.daitso.product.model.Product">
	UPDATE product
	   SET product_option_first = #{productOptionFirst},
	   	   product_option_second = #{productOptionSecond},
	   	   product_option_third = #{productOptionThird},
	   	   product_price = #{productPrice},
	       product_stock = #{productStock}
	 WHERE product_id = #{productId}
</update>


<!-- 기존 상품 등록 -->
<insert id="registerExistingProducts" parameterType="com.example.daitso.product.model.ProductCheck">
<![CDATA[
    INSERT INTO product ( product_group_id,
    					  product_id, 
						  category_id, 
						  product_nm, 
						  product_content,
						  product_image_first,
						  product_image_second,
						  product_image_third,
						  product_price, 
						  product_stock, 
						  product_option_first, 
						  product_option_second, 
						  product_option_third )
    VALUES ( #{productGroupId},
    		 product_seq.NEXTVAL, 
			 #{SecondCategoryId}, 
			 #{productNm}, 
			 #{productContent},
			 #{productImageFirst},
			 #{productImageSecond},
			 #{productImageThird},
			 #{productPrice}, 
			 #{productStock}, 
			 #{productOptionFirst}, 
			 #{productOptionSecond}, 
			 #{productOptionThird} )
]]>
</insert>









<select id="selectProductOptionFirst" parameterType="int" resultType="map">
	SELECT nvl(product_option_first,0) AS optionFirst 
	FROM product WHERE product_group_id = #{productGroupId}
	GROUP BY product_option_first
</select>

<select id="selectProductOptionSecond" resultType="map">
	SELECT nvl(max(product_option_second),0) AS optionSecond
	FROM product 
	WHERE product_group_id=#{productGroupId}
	<choose>
		<when test='productOptionFirst.equals("0")'>
		</when>
		<otherwise>
			AND product_option_first = #{productOptionFirst}
		</otherwise>
	</choose>
	GROUP BY product_option_second
</select>

<select id="selectProductOptionThird" resultType="map">
	SELECT nvl(max(product_option_third),0) AS optionThird
	FROM product 
	WHERE product_group_id=#{productGroupId}
	<choose>
		<when test='productOptionFirst.equals("0")'>
		</when>
		<otherwise>
			AND product_option_first = #{productOptionFirst}
		</otherwise>
	</choose>
	<choose>
		<when test='productOptionSecond.equals("0")'>
		</when>
		<otherwise>
			AND product_option_second = #{productOptionSecond}
		</otherwise>
	</choose>
	 GROUP BY product_option_third
</select>

<select id="selectOptionProduct" resultMap="productMap">
	SELECT * FROM
	(SELECT p.*, rownum as rnum FROM product p
	WHERE product_group_id = #{productGroupId}
	<choose>
		<when test='productOptionFirst.equals("0")'>
		</when>
		<otherwise>
			AND product_option_first = #{productOptionFirst}
		</otherwise>
	</choose>
	<choose>
		<when test='productOptionSecond.equals("0")'>
		</when>
		<otherwise>
			AND product_option_second = #{productOptionSecond}
		</otherwise>
	</choose>
	<choose>
		<when test='productOptionThird.equals("0")'>
		</when>
		<otherwise>
				AND product_option_third = #{productOptionThird}
		</otherwise>
	</choose>
	ORDER BY product_price)
	WHERE rnum = 1
</select>

<select id="selectInquiryProductId" resultType="int">
	SELECT product_id 
	FROM product
	WHERE product_group_id = #{productGroupId} and status='Y'
	<choose>
		<when test='size.equals("사이즈옵션 없음")'>
			and product_option_first is null
		</when>
		<otherwise>
			and product_option_first = #{size}
		</otherwise>
	</choose>
	<choose>
		<when test='color.equals("색상옵션 없음")'>
			and product_option_second is null
		</when>
		<otherwise>
			and product_option_second = #{color}
		</otherwise>
	</choose>
	<choose>
		<when test='other.equals("기타옵션 없음")'>
			and product_option_third is null
		</when>
		<otherwise>
			and product_option_third = #{other}
		</otherwise>
	</choose>
</select>

</mapper>